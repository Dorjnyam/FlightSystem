// <auto-generated />
using System;
using FlightSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightSystem.Data.Migrations
{
    [DbContext(typeof(FlightSystemDbContext))]
    partial class FlightSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("FlightSystem.Core.Models.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AircraftCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("TotalSeats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AircraftCode")
                        .IsUnique();

                    b.HasIndex("AircraftType");

                    b.HasIndex("IsActive");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.BoardingPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarcodeData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("BoardingByEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoardingPassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BoardingTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightPassengerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBoardingComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("IssuedByEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatAssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BoardingByEmployeeId");

                    b.HasIndex("BoardingPassCode")
                        .IsUnique();

                    b.HasIndex("FlightPassengerId");

                    b.HasIndex("IsBoardingComplete");

                    b.HasIndex("IssuedAt");

                    b.HasIndex("IssuedByEmployeeId");

                    b.HasIndex("SeatAssignmentId");

                    b.ToTable("BoardingPasses");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkStationId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Role");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualDeparture")
                        .HasColumnType("TEXT");

                    b.Property<int>("AircraftId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArrivalAirport")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BoardingTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckinCloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckinOpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedByEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepartureAirport")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("GateNumber")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledArrival")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDeparture")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("CreatedByEmployeeId");

                    b.HasIndex("FlightNumber")
                        .IsUnique();

                    b.HasIndex("ScheduledDeparture");

                    b.HasIndex("Status");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.FlightPassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaggageInfo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CheckinByEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CheckinTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCheckedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("PassengerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookingReference");

                    b.HasIndex("CheckinByEmployeeId");

                    b.HasIndex("CheckinTime");

                    b.HasIndex("IsCheckedIn");

                    b.HasIndex("PassengerId");

                    b.HasIndex("FlightId", "PassengerId")
                        .IsUnique();

                    b.ToTable("FlightPassengers");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Nationality");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AircraftId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAisleSeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmergencyExit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsWindowSeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("Class");

                    b.HasIndex("IsActive");

                    b.HasIndex("AircraftId", "SeatNumber")
                        .IsUnique();

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.SeatAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssignedByEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightPassengerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAt");

                    b.HasIndex("AssignedByEmployeeId");

                    b.HasIndex("FlightPassengerId");

                    b.HasIndex("IsActive");

                    b.HasIndex("SeatId", "FlightPassengerId")
                        .IsUnique();

                    b.ToTable("SeatAssignments");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.BoardingPass", b =>
                {
                    b.HasOne("FlightSystem.Core.Models.Employee", "BoardingByEmployee")
                        .WithMany()
                        .HasForeignKey("BoardingByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlightSystem.Core.Models.FlightPassenger", "FlightPassenger")
                        .WithMany("BoardingPasses")
                        .HasForeignKey("FlightPassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystem.Core.Models.Employee", "IssuedByEmployee")
                        .WithMany("IssuedBoardingPasses")
                        .HasForeignKey("IssuedByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightSystem.Core.Models.SeatAssignment", "SeatAssignment")
                        .WithMany("BoardingPasses")
                        .HasForeignKey("SeatAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardingByEmployee");

                    b.Navigation("FlightPassenger");

                    b.Navigation("IssuedByEmployee");

                    b.Navigation("SeatAssignment");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Flight", b =>
                {
                    b.HasOne("FlightSystem.Core.Models.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightSystem.Core.Models.Employee", "CreatedByEmployee")
                        .WithMany("CreatedFlights")
                        .HasForeignKey("CreatedByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("CreatedByEmployee");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.FlightPassenger", b =>
                {
                    b.HasOne("FlightSystem.Core.Models.Employee", "CheckinByEmployee")
                        .WithMany("CheckedInPassengers")
                        .HasForeignKey("CheckinByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlightSystem.Core.Models.Flight", "Flight")
                        .WithMany("FlightPassengers")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystem.Core.Models.Passenger", "Passenger")
                        .WithMany("FlightPassengers")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckinByEmployee");

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Seat", b =>
                {
                    b.HasOne("FlightSystem.Core.Models.Aircraft", "Aircraft")
                        .WithMany("Seats")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.SeatAssignment", b =>
                {
                    b.HasOne("FlightSystem.Core.Models.Employee", "AssignedByEmployee")
                        .WithMany("SeatAssignments")
                        .HasForeignKey("AssignedByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightSystem.Core.Models.FlightPassenger", "FlightPassenger")
                        .WithMany("SeatAssignments")
                        .HasForeignKey("FlightPassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystem.Core.Models.Seat", "Seat")
                        .WithMany("SeatAssignments")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedByEmployee");

                    b.Navigation("FlightPassenger");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Aircraft", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Employee", b =>
                {
                    b.Navigation("CheckedInPassengers");

                    b.Navigation("CreatedFlights");

                    b.Navigation("IssuedBoardingPasses");

                    b.Navigation("SeatAssignments");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Flight", b =>
                {
                    b.Navigation("FlightPassengers");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.FlightPassenger", b =>
                {
                    b.Navigation("BoardingPasses");

                    b.Navigation("SeatAssignments");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Passenger", b =>
                {
                    b.Navigation("FlightPassengers");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.Seat", b =>
                {
                    b.Navigation("SeatAssignments");
                });

            modelBuilder.Entity("FlightSystem.Core.Models.SeatAssignment", b =>
                {
                    b.Navigation("BoardingPasses");
                });
#pragma warning restore 612, 618
        }
    }
}
